/* 2.0 SQL QUERIES */
--2.1
SELECT *
FROM chinook.Employee;

SELECT *
FROM chinook.Employee
WHERE FIRSTNAME = 'King';

SELECT *
FROM chinook.Employee
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT *
FROM chinook.Album
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM chinook.Customer
ORDER BY CITY;

--2.3
INSERT INTO chinook.Genre VALUES(26, 'Synthpop');
INSERT INTO chinook.Genre VALUES(27, 'Danger Music');

INSERT INTO chinook.Employee VALUES(9, 'Jackson', 'Dink', 'Floor Sweeper', NULL, '20-DEC-20', '31-MAY-10', '1919 Jokes Drive', 'Mobile', 'AL', 'US', 'T2J 3I2', '+1 (283) 382-3882', '+1 (222) 394-2332', 'dink@chinookcorp.com');
INSERT INTO chinook.Employee VALUES(10, 'Skinley', 'Quinn', 'Emotional Support', NULL, '03-NOV-90', '31-OCT-12', '4484 Jonolia Way', 'Leeward', 'OH', 'US', 'U2U 1K2', '+1 (123) 999-3232', '+1 (121) 326-7547', 'quinn@chinookcorp.com');

INSERT INTO chinook.Customer VALUES(60, 'Jackie', 'Jackson', NULL, '493 Boy Street', 'Hell', 'MI', 'USA', '23932', '+1 (383) 399-0593', NULL, 'jokeman@gmail.com', '3');
INSERT INTO chinook.Customer VALUES(61, 'Kelly', 'Kelso', NULL, '4444 Four Way', 'Jonestown', 'CA', 'USA', '16244', '+1 (347) 175-1123', NULL, 'killa69@gmail.com', '3');

--2.4
UPDATE chinook.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE chinook.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5
SELECT * FROM chinook.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM chinook.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM chinook.EMPLOYEE
WHERE HIREDATE BETWEEN '1-JUN-03' AND '1-MAR-04';

--2.7
DELETE FROM chinook.INVOICE
WHERE CUSTOMERID = 32;

ALTER TABLE chinook.INVOICELINE
    ADD CONSTRAINT FK_INVOICEIDINVOICEID
    FOREIGN KEY (INVOICEID)
    REFERENCES chinook.INVOICE (INVOICEID)
    ON DELETE CASCADE;
    
ALTER TABLE chinook.INVOICE
    ADD CONSTRAINT FK_INVOICEIDCUSTOMERID
    FOREIGN KEY (CUSTOMERID)
    REFERENCES chinook.CUSTOMER (CUSTOMERID)
    ON DELETE CASCADE;    
    
DELETE FROM chinook.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

/* 3.0 SQL FUNCTIONS */
--3.1
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN TIMESTAMP AS X TIMESTAMP;
BEGIN
    X:=CURRENT_TIMESTAMP;
    RETURN X;
END;
/

DECLARE
    CURRENTTIME TIMESTAMP;
BEGIN
    CURRENTTIME:= GET_CURRENT_TIME;
    DBMS_OUTPUT.PUT_LINE('Current time is '||CURRENTTIME);
END;
/

CREATE OR REPLACE FUNCTION GET_MEDIATYPE_LENGTH (MEDIANAME IN VARCHAR2)
RETURN NUMBER AS MEDIALENGTH NUMBER;
BEGIN
    MEDIALENGTH:=LENGTH(MEDIANAME);
    RETURN MEDIALENGTH;
END;
/

DECLARE
    MEDIALENGTH NUMBER;
    MEDIATYPENAME VARCHAR(40);
BEGIN
    SELECT NAME INTO MEDIATYPENAME FROM chinook.MEDIATYPE WHERE MEDIATYPEID = 4;
    
    MEDIALENGTH:= GET_MEDIATYPE_LENGTH(MEDIATYPENAME);
    DBMS_OUTPUT.PUT_LINE('Media type length is '||MEDIALENGTH);
END;
/

--3.2
CREATE OR REPLACE FUNCTION GET_TOTAL_AVERAGE
RETURN NUMBER AS AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE
    FROM chinook.INVOICE;
    
    RETURN AVERAGE;
END;
/

CREATE OR REPLACE FUNCTION GET_HIGHEST_TRACK
RETURN VARCHAR2 AS TRACKNAME VARCHAR2(40);
BEGIN
    DECLARE 
        HIGHEST NUMBER;
    BEGIN
        SELECT MAX(UNITPRICE) INTO HIGHEST
        FROM chinook.TRACK;
    
        SELECT NAME INTO TRACKNAME
        FROM chinook.TRACK
        WHERE UNITPRICE = HIGHEST;
    
        RETURN TRACKNAME;
    END;
END;
/

--3.3
CREATE OR REPLACE PROCEDURE
GET_INVOICEID(S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT INVOICEID, AVG(UNITPRICE) 
    FROM chinook.INVOICELINE
    GROUP BY INVOICEID
    ORDER BY INVOICEID;
END;

DECLARE
    S SYS_REFCURSOR;
    INVOICE_ID chinook.INVOICELINE.INVOICEID%TYPE;
    INVOICE_TOTAL NUMBER;
BEGIN
    GET_INVOICEID(S);
    LOOP
        FETCH S INTO INVOICE_ID, INVOICE_TOTAL;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(INVOICE_ID||' IS CURRENT INVOICE ID, '||INVOICE_TOTAL||' IS AVERAGE PRICE');
    END LOOP;
    CLOSE S;
END;
/

--3.4
CREATE OR REPLACE PROCEDURE
GET_EMPLOYEE(S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT EMPLOYEEID, BIRTHDATE 
    FROM chinook.EMPLOYEE;
END;
/

CREATE OR REPLACE FUNCTION GET_EMPLOYEES_BORN_AFTER
RETURN VARCHAR2 AS RETURNVAR VARCHAR2(40);
BEGIN
    DECLARE 
        S SYS_REFCURSOR;
        EMPLOYEE_ID NUMBER;
        EMPLOYEE_BIRTH DATE;
    BEGIN
        GET_EMPLOYEE(S);
        LOOP
            FETCH S INTO EMPLOYEE_ID, EMPLOYEE_BIRTH;
            EXIT WHEN S%NOTFOUND;
            IF EXTRACT(YEAR FROM EMPLOYEE_BIRTH)>'1986' THEN 
                DBMS_OUTPUT.PUT_LINE(EMPLOYEE_ID||' is the Employee ID, '||EXTRACT(YEAR FROM EMPLOYEE_BIRTH)||' is the year they were born.');
            END IF;
        END LOOP;
        CLOSE S;
        RETURNVAR:='0';
        RETURN RETURNVAR;
    END;
END;
/

DECLARE
    RETURNVAR VARCHAR2(40);
BEGIN
    RETURNVAR:=GET_EMPLOYEES_BORN_AFTER;
END;
/

/*4.0 STORED PROCEDURES */
--4.1
CREATE OR REPLACE PROCEDURE
GET_EMPLOYEE_NAMES(S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME 
    FROM chinook.EMPLOYEE;
END;
/

CREATE OR REPLACE PROCEDURE
SP_GET_NAMES AS
BEGIN
    DECLARE 
        S SYS_REFCURSOR;
        FIRST_NAME VARCHAR2(15);
        LAST_NAME VARCHAR2(15);
    BEGIN
        GET_EMPLOYEE_NAMES(S);
        LOOP
            FETCH S INTO FIRST_NAME, LAST_NAME;
            EXIT WHEN S%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(FIRST_NAME||' '||LAST_NAME);
        END LOOP;
        CLOSE S;
    END;    
END;
/

--4.2

CREATE OR REPLACE PROCEDURE
SP_UPDATE_PERSONAL_INFO(E_ID IN NUMBER, E_ADDRESS IN VARCHAR2) AS
BEGIN
    UPDATE chinook.EMPLOYEE SET ADDRESS = E_ADDRESS
        WHERE EMPLOYEEID = E_ID;
        
    DBMS_OUTPUT.PUT_LINE('ADDRESS UPDATED TO '||E_ADDRESS);
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE
SP_REPORTS_TO(E_ID IN NUMBER) AS
BEGIN
    DECLARE
        MANAGER_ID NUMBER;
        E_FIRST_NAME VARCHAR2(15);
        E_LAST_NAME VARCHAR2(15);
    BEGIN
        SELECT REPORTSTO INTO MANAGER_ID
        FROM chinook.EMPLOYEE
        WHERE EMPLOYEEID = E_ID;
        
        SELECT FIRSTNAME, LASTNAME INTO E_FIRST_NAME, E_LAST_NAME
        FROM chinook.EMPLOYEE
        WHERE EMPLOYEEID = MANAGER_ID;
        
        DBMS_OUTPUT.PUT_LINE('Employee '||E_ID||' reports to '||E_FIRST_NAME||' '||E_LAST_NAME);
        
        EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('Employee either does not report to anyone or does not exist.');
    END;
END;
/

--4.3
CREATE OR REPLACE PROCEDURE
SP_NAME_AND_COMPANY(C_ID IN NUMBER) AS
BEGIN
    DECLARE
        C_COMPANY VARCHAR2(80);
        C_FIRST_NAME VARCHAR2(15);
        C_LAST_NAME VARCHAR2(15);
    BEGIN
        SELECT COMPANY, FIRSTNAME, LASTNAME INTO C_COMPANY, C_FIRST_NAME, C_LAST_NAME
        FROM chinook.CUSTOMER
        WHERE CUSTOMERID = C_ID;
        
        
        IF C_COMPANY IS NULL THEN
            DBMS_OUTPUT.PUT_LINE('Customer '||C_ID||' is named '||C_FIRST_NAME||' '||C_LAST_NAME||', and they are unaffiliated.');
        ELSE 
            DBMS_OUTPUT.PUT_LINE('Customer '||C_ID||' is named '||C_FIRST_NAME||' '||C_LAST_NAME||', and their company is '||C_COMPANY);
        END IF;

        EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('Customer does not exist.');
    END;
END;
/

/* 5.0 TRANSACTIONS */
--5.0
CREATE OR REPLACE PROCEDURE
SP_DELETE_INVOICE(I_ID IN NUMBER) AS
BEGIN
    DELETE FROM chinook.INVOICE
    WHERE INVOICEID = I_ID;
        
    DBMS_OUTPUT.PUT_LINE('INVOICE DELETED');
    COMMIT;
    
    EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('Invoice does not exist.');
            ROLLBACK;
END;
/



CREATE OR REPLACE PROCEDURE
SP_INSERT_CUSTOMER(C_ID IN NUMBER, C_FIRST IN VARCHAR2, C_LAST IN VARCHAR2, C_COMPANY IN VARCHAR2, C_ADDRESS IN VARCHAR2, C_CITY IN VARCHAR2, C_STATE IN VARCHAR2, C_COUNTRY IN VARCHAR, C_POSTALCODE IN VARCHAR2, C_PHONE IN VARCHAR2, C_FAX IN VARCHAR2, C_EMAIL IN VARCHAR2, C_SUPPORTREPID IN NUMBER) AS
BEGIN
    INSERT INTO chinook.CUSTOMER
    VALUES
    (C_ID, C_FIRST, C_LAST, C_COMPANY, C_ADDRESS, C_CITY, C_STATE, C_COUNTRY, C_POSTALCODE, C_PHONE, C_FAX, C_EMAIL, C_SUPPORTREPID);
    
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDED');
    COMMIT;
    
    EXCEPTION
            WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('CUSTOMER ENTRY FAILED');
            ROLLBACK;
END;
/

/* 6.0 TRIGGERS */
--6.1
CREATE OR REPLACE TRIGGER AFTER_EMPLOYEE_INSERT
AFTER INSERT ON chinook.EMPLOYEE
FOR EACH ROW
WHEN (NEW.EMPLOYEEID > 0)
DECLARE
    E_FIRSTNAME VARCHAR2(20);
    E_LASTNAME VARCHAR2(20);
    E_ID NUMBER;
BEGIN
    E_FIRSTNAME:= :NEW.FIRSTNAME;
    E_LASTNAME:= :NEW.LASTNAME;
    E_ID:= :NEW.EMPLOYEEID;
    DBMS_OUTPUT.PUT_LINE('New employee '||E_FIRSTNAME||' '||E_LASTNAME||' added.');
END;
/

CREATE OR REPLACE TRIGGER AFTER_ALBUM_UPDATE
AFTER UPDATE ON chinook.ALBUM
FOR EACH ROW
WHEN (NEW.ALBUMID > 0)
DECLARE
    A_TITLE VARCHAR2(80);
    A_ARTISTID NUMBER;
    A_OLDTITLE VARCHAR2(80);
    A_OLDARTISTID NUMBER;
BEGIN
    A_TITLE:=:NEW.TITLE;
    A_ARTISTID:=:NEW.ARTISTID;
    A_OLDTITLE:=:OLD.TITLE;
    A_OLDARTISTID:=:OLD.ARTISTID;
    DBMS_OUTPUT.PUT_LINE('Old Album Name: '||A_OLDTITLE||', Old Artist ID '||A_OLDARTISTID);
    DBMS_OUTPUT.PUT_LINE('New Album Name: '||A_TITLE||', New Artist ID '||A_ARTISTID);
END;
/

CONN chinook/p4ssw0rd;
CREATE OR REPLACE TRIGGER AFTER_CUSTOMER_DELETE
AFTER DELETE ON chinook.CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Customer deleted.');
END;
/

/* 7.0 JOINS */
--7.1
SELECT INVOICEID, FIRSTNAME, LASTNAME 
FROM chinook.CUSTOMER 
INNER JOIN chinook.INVOICE 
ON chinook.INVOICE.CUSTOMERID = chinook.CUSTOMER.CUSTOMERID;

--7.2
SELECT chinook.CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM chinook.CUSTOMER
LEFT OUTER JOIN chinook.INVOICE
ON chinook.INVOICE.CUSTOMERID = chinook.CUSTOMER.CUSTOMERID;

--7.3
SELECT NAME, TITLE
FROM chinook.ALBUM
RIGHT OUTER JOIN chinook.ARTIST
ON chinook.ALBUM.ARTISTID = chinook.ARTIST.ARTISTID;

--7.4
SELECT NAME, TITLE
FROM chinook.ALBUM 
CROSS JOIN chinook.ARTIST
ORDER BY NAME ASC;

--7.5
SELECT A.EMPLOYEEID, A.FIRSTNAME, A.LASTNAME, B.EMPLOYEEID AS "MANAGER ID", B.FIRSTNAME AS "MANAGER FIRST NAME", B.LASTNAME AS "MANAGER LAST NAME"
FROM chinook.EMPLOYEE A, chinook.EMPLOYEE B
WHERE A.REPORTSTO = B.EMPLOYEEID;

--7.6
SELECT *
FROM chinook.EMPLOYEE INNER JOIN chinook.CUSTOMER
ON SUPPORTREPID = EMPLOYEEID
INNER JOIN INVOICE
ON chinook.INVOICE.CUSTOMERID = chinook.CUSTOMER.CUSTOMERID
INNER JOIN chinook.INVOICELINE
ON chinook.INVOICELINE.INVOICEID = chinook.INVOICE.INVOICEID
INNER JOIN chinook.TRACK
ON chinook.TRACK.TRACKID = chinook.INVOICELINE.TRACKID
INNER JOIN chinook.PLAYLISTTRACK
ON chinook.TRACK.TRACKID = chinook.PLAYLISTTRACK.TRACKID
INNER JOIN chinook.PLAYLIST
ON chinook.PLAYLIST.PLAYLISTID = chinook.PLAYLISTTRACK.PLAYLISTID
INNER JOIN chinook.MEDIATYPE
ON chinook.MEDIATYPE.MEDIATYPEID = chinook.TRACK.MEDIATYPEID
INNER JOIN chinook.GENRE
ON chinook.GENRE.GENREID = chinook.TRACK.GENREID
INNER JOIN chinook.ALBUM
ON chinook.ALBUM.ALBUMID = chinook.TRACK.ALBUMID
INNER JOIN chinook.ARTIST
ON chinook.ARTIST.ARTISTID = chinook.ALBUM.ARTISTID;